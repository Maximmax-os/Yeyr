#include <toneAC.h>  // Для лучшего звука (установите через менеджер библиотек)

// Пины L293D
#define ENA 9
#define IN1 8
#define IN2 7
#define ENB 10
#define IN3 6
#define IN4 5
#define BUZZER 11

// Мелодия "К Элизе"
const int melody[] = {
  659, 587, 659, 587, 659, 494, 587, 523, // E5 D5 E5 D5 E5 B4 D5 C5
  440, 262, 330, 440, 494, 330, 392, 494,  // A4 C4 E4 A4 B4 E4 G4 B4
  523                                       // C5
};

const int noteDurations[] = {
  8, 8, 8, 8, 8, 8, 8, 8,  // 8 - восьмые ноты
  4, 8, 8, 8, 4, 8, 8, 8,  // 4 - четвертные
  2                        // 2 - половинная
};

// Переменные для управления
int currentNote = 0;
unsigned long lastNoteTime = 0;
bool isMoving = true;

void setup() {
  // Настройка пинов моторов
  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  
  // Старт движения
  moveForward();
}

void loop() {
  unsigned long currentTime = millis();
  
  // 1. Управление движением (5 секунд вперёд → 2 сек стоп → поворот)
  if (isMoving) {
    if (currentTime < 5000) {
      // Продолжаем ехать вперёд
    } 
    else if (currentTime < 7000) {
      stopMotors();
    } 
    else {
      turnRight();
      delay(500);  // Короткий поворот
      moveForward();
      isMoving = false;  // Остановимся после цикла
    }
  }

  // 2. Воспроизведение мелодии без блокировки
  if (currentNote < sizeof(melody)/sizeof(int)) {
    if (currentTime - lastNoteTime >= (1000 / noteDurations[currentNote]) * 1.3) {
      toneAC(BUZZER, melody[currentNote], noteDurations[currentNote]);
      lastNoteTime = currentTime;
      currentNote++;
    }
  } else {
    noToneAC();  // Выключить звук после завершения
  }
}

// ===== Функции движения =====
void moveForward() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENA, 200);
  analogWrite(ENB, 200);
}

void turnRight() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  analogWrite(ENA, 150);
  analogWrite(ENB, 150);
}

void stopMotors() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(ENA, 0);
  analogWrite(ENB, 0);
}
