// Пины L293D
#define ENA 9
#define IN1 8
#define IN2 7
#define ENB 10
#define IN3 6
#define IN4 5
#define BUZZER 11 // Пьезо-пищалка

// Мелодия "К Элизе" (частоты в Гц)
const int melody[] = {
  659, 587, 659, 587, 659, 494, 587, 523, // E5 D5 E5 D5 E5 B4 D5 C5
  440, 262, 330, 440, 494, 330, 392, 494,  // A4 C4 E4 A4 B4 E4 G4 B4
  523                                       // C5
};

// Длительности нот (4 - четверть, 8 - восьмая)
const byte durations[] = {
  8, 8, 8, 8, 8, 8, 8, 8,
  4, 8, 8, 8, 4, 8, 8, 8,
  2
};

// Системные переменные
int currentNote = 0;
unsigned long prevNoteTime = 0;
bool isMelodyPlaying = true;

void setup() {
  // Настройка пинов моторов
  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  
  // Начальное движение
  moveForward();
}

void loop() {
  // 1. Воспроизведение мелодии
  if (isMelodyPlaying) {
    playMelody();
  }

  // 2. Движение по алгоритму
  static unsigned long moveStartTime = millis();
  
  if (millis() - moveStartTime < 3000) {
    moveForward();  // 3 секунды вперед
  } 
  else if (millis() - moveStartTime < 4000) {
    turnRight();    // 1 секунда поворот
  } 
  else {
    moveStartTime = millis();  // Сброс таймера
  }
}

// ===== Функции движения =====
void moveForward() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENA, 200);
  analogWrite(ENB, 200);
}

void turnRight() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  analogWrite(ENA, 150);
  analogWrite(ENB, 150);
}

void stopMotors() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(ENA, 0);
  analogWrite(ENB, 0);
}

// ===== Воспроизведение мелодии (с tone()) =====
void playMelody() {
  if (currentNote >= sizeof(melody)/sizeof(int)) {
    noTone(BUZZER);
    isMelodyPlaying = false;
    return;
  }

  int noteDuration = 1000 / durations[currentNote];
  
  if (millis() - prevNoteTime >= noteDuration * 1.3) {
    tone(BUZZER, melody[currentNote], noteDuration);
    prevNoteTime = millis();
    currentNote++;
  }
}
